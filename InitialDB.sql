-- ARGENIS RUBEN DOMINGUEZ
-- NOVEMBER 2020
-- REVATURE PROJECT_0

-- DROPPING VIEWS, TABLES AND SCHEMAS TO START WITH A CLEAN DB

DROP VIEW IF EXISTS
	PRODUCT_FEATURES_VIEW,
	PRODUCT_SPECIFICATIONS_VIEW,
	PRODUCT_REVIEWS_VIEW
CASCADE;

DROP TABLE IF EXISTS
	PRODUCT_FEATURES,
	PRODUCT_SPECIFICATIONS,
	PRODUCT_REVIEWS,
	PRODUCT_IMAGES,

	USERS,
	USERTYPE,
	
	PRODUCT,
	DEPARTMENT,
	STYLE,
	CATEGORY,
	BRAND,
	PREMIUMGEAR,
	CONDITION,
	FEATURES,
	SPECIFICATIONS,
	REVIEWS,
	IMAGES

CASCADE;

DROP SCHEMA IF EXISTS 
	public
CASCADE;

-- CREATING SCHEMA AND SETTING AUTHORIZATION --

CREATE SCHEMA IF NOT EXISTS public
    AUTHORIZATION postgres;

-- CREATING NECESSARY TABLES FOR DATABASE --

CREATE TABLE IF NOT EXISTS USERTYPE (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	CODE		VARCHAR(10)		NOT NULL	UNIQUE,
	DESCRIPTION	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE
); 

INSERT INTO USERTYPE (CODE, DESCRIPTION) VALUES
('ADMIN', 'ADMINISTRATOR'),
('EMP', 'EMPLOYEE'),
('USR', 'USER');
   
CREATE TABLE IF NOT EXISTS USERS (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	USERNAME	VARCHAR(255)	NOT NULL	UNIQUE,
	EMAIL		VARCHAR(500)	NOT NULL	UNIQUE,
	PASSWORD	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE,
	USERTYPE_UID	INT			NOT NULL	DEFAULT 3,
	
	CONSTRAINT FK_USERTYPE
		FOREIGN KEY(USERTYPE_UID)
			REFERENCES USERTYPE(UNIQUEID)
);

INSERT INTO USERS (USERNAME, EMAIL, PASSWORD, USERTYPE_UID) VALUES
('ruben.dominguez', 'ruben.dominguez@revature.net', 'cac6f701071388abe89e12874c9c0bd4', 1),
('lisa.freiwald', 'lisa.freiwald@yahoo.com', '83b7db4f79abb1fef6106020a91609d8', 2);

CREATE TABLE IF NOT EXISTS DEPARTMENT(
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	CODE		VARCHAR(10)		NOT NULL	UNIQUE,
	DESCRIPTION	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE
);

INSERT INTO DEPARTMENT (CODE, DESCRIPTION) VALUES 
('GUI', 'GUITARS'),
('BAS', 'BASSES'),
('AES', 'AMPS AND EFFECTS');

CREATE TABLE IF NOT EXISTS STYLE (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	CODE		VARCHAR(10)		NOT NULL	UNIQUE,
	DESCRIPTION	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE
);

INSERT INTO STYLE (CODE, DESCRIPTION) VALUES
('MNT', 'MATE NATURAL'),
('BLB', 'BLUE BUST'),
('RDB', 'RED BURST');

CREATE TABLE IF NOT EXISTS CATEGORY (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	CODE		VARCHAR(10)		NOT NULL	UNIQUE,
	DESCRIPTION	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE
);

INSERT INTO CATEGORY (CODE, DESCRIPTION) VALUES
('ELG', 'ELECTRIC GUITARS'),
('ACG', 'ACOUSTIC GUITARS'),
('CNG', 'CLASSICAL AND NYLON GUITARS');

CREATE TABLE IF NOT EXISTS BRAND (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	CODE		VARCHAR(10)		NOT NULL	UNIQUE,
	DESCRIPTION	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE
);

INSERT INTO BRAND (CODE, DESCRIPTION) VALUES
('GTC', 'GUITAR CENTER'),
('IBZ', 'IBANEZ'),
('GBN', 'GIBSON');

CREATE TABLE IF NOT EXISTS PREMIUMGEAR (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	CODE		VARCHAR(10)		NOT NULL	UNIQUE,
	DESCRIPTION	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE
);

INSERT INTO PREMIUMGEAR (CODE, DESCRIPTION) VALUES
('PRM', 'PREMIUM'),
('PTM', 'PLATINUM'),
('VIN', 'VINTAGE');

CREATE TABLE IF NOT EXISTS CONDITION (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	CODE		VARCHAR(10)		NOT NULL	UNIQUE,
	DESCRIPTION	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE
);

INSERT INTO CONDITION (CODE, DESCRIPTION) VALUES
('NEW', 'NEW'),
('USD', 'USED'),
('RBS', 'REFURBISHED');

CREATE TABLE IF NOT EXISTS FEATURES (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	CODE		VARCHAR(10)		NOT NULL	UNIQUE,
	DESCRIPTION	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE
);

INSERT INTO FEATURES (CODE, DESCRIPTION) VALUES
('BWB', 'BASSWOOD BODY'),
('BMN', 'BOLT-ON MAHOGANY NECK'),
('RWF', 'ROSEWOOD FRETBOARD');

CREATE TABLE IF NOT EXISTS SPECIFICATIONS (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	CODE		VARCHAR(10)		NOT NULL	UNIQUE,
	DESCRIPTION	VARCHAR(255)	NOT NULL,
	ACTIVE		BOOLEAN			NOT NULL	DEFAULT TRUE
);

INSERT INTO SPECIFICATIONS (CODE, DESCRIPTION) VALUES
('FR12', '12" FRETBOARD RADIUS'),
('S2434', '24-3/4" SCALE'),
('NW11116', '1-11/16 NUT WIDTH');

CREATE TABLE IF NOT EXISTS REVIEWS (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	VALUE		INT				NOT NULL	DEFAULT 5,
	TITLE		VARCHAR(255)	NOT NULL,
	BODY		TEXT			NOT NULL
);

INSERT INTO REVIEWS (VALUE, TITLE, BODY) VALUES
(5, 'Great Playing, Great Sounding for any price', 'I seriously love this guitar. While I''ve owned guitars costing 10 times as much as I paid for the LP Special I P90, none of them sounded better or played better. While the electronics, tuners, and other hardware are nothing special, I''ve had no issues with any of it. After a setup by the tech at GC, the action is nice and there''s no fret buzz. It stays in tune well enough, and it sounds like a dream. The P90 pickups have that special flavor you just can duplicate elsewhere. Unless your''re a shredder, you''ll love this little guitar.'),
(3, 'Beware the bridge','I purchased this at my local GC as my first foray into electric guitar, looking for a lower cost option since I didn''t know the level of commitment I''d maintain. The overall set up out of the box was very playable, complete novices have plenty of tones to explore though the neck/rhythm pick up is a bit flat and muddy sounding. After pouring close to 100 hours of play time and a new set of strings into the guitar, a few things really started to become bothersome: - The intonated bridge is, well, awful. - Stock tuning machine heads are frustrating and won''t keep the guitar in tune for more than a few songs. - Again, that frigging bridge... I learned a lot of things from this guitar about what I wanted/needed to make for an enjoyable playing experience. If you have the $50 or so extra get the Special II for the Tune-o-Matic bridge, it''ll save you a lot of frustration.');

CREATE TABLE IF NOT EXISTS IMAGES (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	IMAGENAME	TEXT			NOT NULL,
	IMAGEOID	OID				NOT NULL
);


CREATE TABLE IF NOT EXISTS PRODUCT (
	UNIQUEID	INT				GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	POSID		INT				NOT NULL,
	TITLE		VARCHAR(255)	NOT NULL 	UNIQUE,
	DESCRIPTION	TEXT			NOT NULL,
	PRICE		DECIMAL(12,2)	NOT NULL	DEFAULT 0.00,
	ACTIVE 		BOOLEAN			NOT NULL	DEFAULT TRUE,
	
	DEPARTMENT_UID	INT			NOT NULL	DEFAULT 1,
	STYLE_UID		INT			NOT NULL	DEFAULT 1,
	CATEGORY_UID	INT			NOT NULL	DEFAULT 1,
	BRAND_UID		INT			NOT NULL	DEFAULT 1,
	PREMIUMGEAR_UID	INT			NOT NULL	DEFAULT	1,
	CONDITION_UID	INT			NOT NULL	DEFAULT 1,
	
	CONSTRAINT FK_DEPARTMENT
		FOREIGN KEY (DEPARTMENT_UID)
			REFERENCES DEPARTMENT(UNIQUEID),
	
	CONSTRAINT FK_SYTLE
		FOREIGN KEY (STYLE_UID)
			REFERENCES STYLE(UNIQUEID),
	
	CONSTRAINT FK_CATEGORY
		FOREIGN KEY (CATEGORY_UID)
			REFERENCES CATEGORY(UNIQUEID),
	
	CONSTRAINT FK_BRAND
		FOREIGN KEY (BRAND_UID)
			REFERENCES BRAND(UNIQUEID),
	
	CONSTRAINT FK_PREMIUMGEAR
		FOREIGN KEY (PREMIUMGEAR_UID)
			REFERENCES PREMIUMGEAR(UNIQUEID),
			
	CONSTRAINT FK_CONDITION
		FOREIGN KEY (CONDITION_UID)
			REFERENCES CONDITION(UNIQUEID)
);

INSERT INTO PRODUCT (POSID, TITLE, DESCRIPTION, PRICE, DEPARTMENT_UID, STYLE_UID, CATEGORY_UID, BRAND_UID, PREMIUMGEAR_UID, CONDITION_UID) VALUES 
(110885571,
		'Martin OM-45 Deluxe Authentic 1930 VTS Brazilian Rosewood Acoustic Guitar Natural',
		'This OM-45 Deluxe Authentic 1930 VTS Brazilian Rosewood acoustic guitar— limited to 11 instruments — draws its inspiration and exacting specifications from the 1930 OM-45 Deluxe acquired at the Guernseys Instrument Auction in April 2014. Its Serial# is 44999. It''s real and it''s on display today as a masterpiece among the C.F. Martin & Co Museum Collection in Nazareth, Pennsylvania. This careful recreation faithfully employs the most traditional construction techniques and materials available today with specifications rivaling the original from 1930. This instrument also benefits from Martin''s Authentic VT S top and bracing; the heavily researched advanced aging process that most accurately reproduces the visual character — and most importantly — the sonic performance of the coveted ''20s and ''30s instruments. A lucky few owners around the world will experience this remarkable instrument. Sadly, and once again, most enthusiasts will never see an original OM-45 Deluxe Authentic 1930 — there is only a handful in existence today. They''re rare and they''re real and they embody the finest qualities and timeless traditions of the luthiers'' craft, a Martin tradition since 1833.',
		79999.00, 1, 1, 1, 1, 1, 1),
(115693459, 'Fender Player Stratocaster Maple Fingerboard Electric Guitar  Capri Orange', 
'Over the decades, players have been continually inspired by the sound of a Strat. From the clarity of the high end, through the gut punch of the mids and the solid lows, it''s a sound that''s helped define what an electric guitar should be—versatile enough for any style and broad enough for any player to find an individual voice. This Player Series Stratocaster puts all of the classic features of the Strat at your fingertips while adding a modern edge, including a modern neck profile, medium-jumbo frets and a freshly redesigned 2-point fulcrum vibrato bridge. With a beautiful gloss finish over a solid alder body, a 22-fret pau ferro fingerboard with a contemporary 9.5" radius for easy bending, the Player Series Stratocaster is primed and ready to carry you along your musical voyage.', 
699.99, 2, 2, 2, 2, 2, 2);
	
CREATE TABLE IF NOT EXISTS PRODUCT_FEATURES (
	INIQUEID		INT			GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	PRODUCT_UID		INT			NOT NULL, 
	FEATURES_UID	INT			NOT NULL,
	
	CONSTRAINT FK_PRODUCT
		FOREIGN KEY (PRODUCT_UID)
			REFERENCES PRODUCT(UNIQUEID),

	CONSTRAINT FK_FEATURES
		FOREIGN KEY (FEATURES_UID)
			REFERENCES FEATURES(UNIQUEID)
			
);

INSERT INTO PRODUCT_FEATURES (PRODUCT_UID, FEATURES_UID) VALUES
(1, 1),
(2, 1),
(1, 3);

CREATE TABLE IF NOT EXISTS PRODUCT_SPECIFICATIONS (
	UNIQUEID			INT		GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	PRODUCT_UID			INT		NOT NULL,
	SPECIFICATIONS_UID	INT		NOT NULL,
	
	CONSTRAINT FK_PRODUCT
		FOREIGN KEY (PRODUCT_UID)
			REFERENCES PRODUCT(UNIQUEID),
	
	CONSTRAINT FK_SPECIFICATIONS
		FOREIGN KEY (SPECIFICATIONS_UID)
			REFERENCES SPECIFICATIONS(UNIQUEID)
);

INSERT INTO PRODUCT_SPECIFICATIONS (PRODUCT_UID, SPECIFICATIONS_UID) VALUES
(1, 1),
(1, 2),
(2, 3);

CREATE TABLE IF NOT EXISTS PRODUCT_REVIEWS (
	UNIQUEID		INT			GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	PRODUCT_UID		INT			NOT NULL,
	REVIEWS_UID		INT			NOT NULL,
	
	CONSTRAINT FK_PRODUCT
		FOREIGN KEY (PRODUCT_UID)
			REFERENCES PRODUCT(UNIQUEID),
	
	CONSTRAINT FK_REVIEWS
		FOREIGN KEY (REVIEWS_UID)
			REFERENCES REVIEWS(UNIQUEID)
);

INSERT INTO PRODUCT_REVIEWS (PRODUCT_UID, REVIEWS_UID) VALUES 
(1, 1),
(1, 2);

CREATE TABLE IF NOT EXISTS PRODUCT_IMAGES (
	UNIQUEID		INT			GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	PRODUCT_UID		INT			NOT NULL,
	IMAGES_UID		INT			NOT NULL,
	
	CONSTRAINT FK_PRODUCT
		FOREIGN KEY (PRODUCT_UID)
			REFERENCES PRODUCT(UNIQUEID),
	
	CONSTRAINT FK_IMAGES
		FOREIGN KEY (IMAGES_UID)
			REFERENCES IMAGES(UNIQUEID)
);
   

---- -- CREATING VIEWS --

CREATE VIEW PRODUCT_FEATURES_VIEW AS
SELECT PRODUCT.UNIQUEID AS PRODUCT_UNIQUEID, FEATURES.UNIQUEID AS FEATURES_UNIQUEID, FEATURES.CODE, FEATURES.DESCRIPTION
FROM PRODUCT 
INNER JOIN (FEATURES 
	INNER JOIN PRODUCT_FEATURES ON FEATURES.UNIQUEID = PRODUCT_FEATURES.FEATURES_UID) 
		ON PRODUCT.UNIQUEID = PRODUCT_FEATURES.PRODUCT_UID;

CREATE VIEW PRODUCT_SPECIFICATIONS_VIEW AS 
SELECT PRODUCT.UNIQUEID AS PRODUCT_UNIQUEID, SPECIFICATIONS.UNIQUEID AS SPECIFICATIONS_UNIQUEID, SPECIFICATIONS.CODE, SPECIFICATIONS.DESCRIPTION
FROM PRODUCT 
INNER JOIN (SPECIFICATIONS
	INNER JOIN PRODUCT_SPECIFICATIONS ON SPECIFICATIONS.UNIQUEID = PRODUCT_SPECIFICATIONS.SPECIFICATIONS_UID) 
		ON PRODUCT.UNIQUEID = PRODUCT_SPECIFICATIONS.PRODUCT_UID;
		
CREATE VIEW PRODUCT_REVIEWS_VIEW AS
SELECT PRODUCT.UNIQUEID AS PRODUCT_UNIQUEID, REVIEWS.UNIQUEID AS REVIEWS_UNIQUEID, REVIEWS.VALUE, REVIEWS.TITLE, REVIEWS.BODY
FROM PRODUCT 
INNER JOIN (REVIEWS
	INNER JOIN PRODUCT_REVIEWS ON REVIEWS.UNIQUEID = PRODUCT_REVIEWS.REVIEWS_UID) 
		ON PRODUCT.UNIQUEID = PRODUCT_REVIEWS.PRODUCT_UID;